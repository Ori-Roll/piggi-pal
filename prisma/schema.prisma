// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // These are required fields for auth.js prisma adapter (see auth file)
  // ---------------------------------------------------------------------
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // These are custom fields for our app
  // -----------------------------------
  childAccounts               ChildAccount[]
  parentLock                  ParentLock?
  lastOpenedChildAccountId    String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model ParentLock {
  id              String   @id  @default(cuid()) 
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  pin             Int
  question        String?
  answer          String?
}

model ChildAccount {
  id              String     @id @default(cuid())
  kidName         String
  current         Int        @default(0)
  periodics       Periodic[]
  tasks           Task[]
  transactions    Transaction[]
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String    

}

enum ActionType {
  ADD
  SUBTRACT
  ADDRATE
}

enum TransactionReason {
  PERIODIC
  MANUAL
  PAYMENT
  TASK
  CHORE
}

enum Interval {
  DAY
  WEEK
  BIWEEK
  MONTH
  YEAR
}
model Periodic {
  id                  String       @id @default(cuid())
  name                String
  title               String
  actionType          ActionType
  amount              Int?
  task                Task?
  interval            Interval
  nextOccurrence      DateTime?
  startsAt            DateTime?
  endsAt              DateTime?
  transactions        Transaction[] 
  childAccount        ChildAccount?      @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  childAccountId      String
  cardStyle           CardStyle?  @relation(fields: [cardStyleId], references: [id])
  cardStyleId         String?   
}

model Task {
  id                  String   @id @default(cuid())
  availableAt         DateTime?
  expiresAt           DateTime?
  title               String
  description         String?
  childAccount        ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  childAccountId      String
  completed           Boolean  @default(false)
  completedAt         DateTime?
  amount              Int
  requiredTimes       Int?
  accomplishedTimes   Int?
  periodic            Periodic?   @relation(fields: [periodicId], references: [id], onDelete: Cascade)
  periodicId          String?     @unique
  cardStyle           CardStyle?  @relation(fields: [cardStyleId], references: [id])
  cardStyleId         String?
}

model CardStyle {
  id              String   @id @default(cuid())
  primaryColors   String[]
  secondaryColors String[]
  accentColor     String?
  icon            String?
  tasks           Task[]
  periodics       Periodic[]
}

model Transaction {
  id                  String     @id @default(cuid())
  type                ActionType
  reason              TransactionReason
  amount              Int
  executedAt          DateTime
  viewed              Boolean    @default(false)
  periodic            Periodic?  @relation(fields: [periodicId], references: [id], onDelete: Cascade)
  periodicId          String?
  childAccount        ChildAccount?   @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  childAccountId      String
}
